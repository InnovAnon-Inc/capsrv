name: Simple NCat Server to Receive and Sort AiroDump-NG .cap Files
permissions:
  contents: write

on:
  workflow_dispatch:
  #[workflow_call]
  schedule:
    - cron: '* * * * */1'
    #- cron: '* * 1 * *'
    #- cron: '*/1 * * * *'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: build package
    runs-on: ubuntu-latest
    steps:
    #- name: install build deps
    #  uses: awalsh128/cache-apt-pkgs-action@latest
    #  with:
    #    packages: >
    #      libpq-dev python3 python-is-python3 python3-pip
    #    version: 1.0
    
    - name: Checkout code
      uses: actions/checkout@v3
      #with:
      #  path: "repo"
    
    #- name: Build Deps
    #  run: |
    #    pip install build

    #- name: Optional Build Deps
    #  run: |
    #    pip install -e '.[dev]'
    #
    #- name: Bump version and push tag Dryrun
    #  id:   tag_version_dryrun
    #  uses: mathieudutour/github-tag-action@v6.1
    #  with:
    #    github_token: ${{ secrets.GITHUB_TOKEN }}
    #    tag_prefix:
    #    dry_run: true
    #
    #- name: Build
    #  run: |
    #    python -m build
    #  env:
    #    TEAMHACK_VERSION: ${{ steps.tag_version_dryrun.outputs.new_tag }}

    # TODO new image
    #- name: Install
    #  run: |
    #    pip install dist/*

    #- name: Test Deps
    #  run: |
    #    #pip install '.[test]'
    #    pip install coverage pytest

    #- name: DB
    #  run: |
    #    #sudo createuser  user
    #    #sudo createdb -O user db
    #    echo '[postgresql]'    >  etc/test_database.ini
    #    echo host=localhost    >> etc/test_database.ini
    #    echo database=postgres >> etc/test_database.ini
    #    echo user=postgres     >> etc/test_database.ini
    #    echo password=postgres >> etc/test_database.ini
   
    # TODO 
    #- name: Integration Test
    #  run: |
    #    python -m pytest
    #    #python -m coverage run
    
    ## TODO new image
    #- name: Release Deps
    #  run: |
    #    #pip install '.[rel]'
    #    pip install twine

    #- name: Configure Twine
    #  run: |
    #    echo '[pypi]'                       >  ~/.pypirc
    #    echo 'username = __token__'         >> ~/.pypirc
    #    echo "password = $PYPI_API_TOKEN"   >> ~/.pypirc
    #
    #    echo '[testpypi]'                   >> ~/.pypirc
    #    echo 'username = __token__'         >> ~/.pypirc
    #    echo "password = $TESTPYPI_API_KEY" >> ~/.pypirc
    #  env:
    #    PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

    #- name: Release
    # run: |
    #    #python3 -m twine upload --repository testpypi --verbose dist/*
    #    python3 -m twine upload --repository     pypi --verbose dist/*

    # TODO new image
    #- name: Configure GPG Key
    #  run: |
    #    echo -n "$GPG_SIGNING_KEY" | gpg --import
    #    #echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
    #  env:
    #    GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

    #- name: Sign Installation Package
    #  working-directory: ${{ github.workspace }}/dist
    #  run: |
    #    find . -mindepth 1 -exec gpg --yes --detach-sig '{}' \;

    - name: Bump version and push tag
      id:   tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    # TODO new image
    - name: Authenticate with Docker Hub
      run: |
        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build Docker Image
      run: |
        docker build -t "innovanon/capsrv:$TEAMHACK_VERSION" .
      env:
        TEAMHACK_VERSION: ${{ steps.tag_version.outputs.new_tag }}

    - name: Tag Docker Image
      run: |
        docker tag      "innovanon/capsrv:$TEAMHACK_VERSION" \
                         innovanon/capsrv:latest
      env:
        TEAMHACK_VERSION: ${{ steps.tag_version.outputs.new_tag }}

    - name: Deploy Docker Image
      run: |
        docker push      innovanon/capsrv

    # TODO new image
    - name: Configure GPG Key
      run: |
        echo -n "$GPG_SIGNING_KEY" | gpg --import
        #echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

    - name: Sign Installation Package
      run: |
        gpg --yes --detach-sig Dockerfile
        gpg --yes --detach-sig docker-compose.yaml
        find bin -mindepth 1 -exec gpg --yes --detach-sig '{}' \;
    
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        fail_on_unmatched_files: true
        generate_release_notes: true
        files: |
          *
          bin/*

